services:

    oc_platform.antispam:
        class: OC\PlatformBundle\Antispam\OCAntispam
        arguments: [@mailer, 50]
        tags:
            -  { name: twig.extension }
        calls:
            - [ setLocale, [ %locale% ] ]

    oc_platform.doctrine.notification:
        class: OC\PlatformBundle\DoctrineListener\ApplicationNotification
        arguments: [@mailer]
        tags:
            - { name: doctrine.event_listener, event: postPersist }

    oc_platform.purge:
        class: OC\PlatformBundle\Purger\PurgerService
        arguments: [@doctrine.orm.entity_manager, @session]

    oc_platform.validator.antiflood:                              # Le nom du service
        class: OC\PlatformBundle\Validator\AntifloodValidator     # La classe du service, ici notre validateur déjà créé
        arguments: [@request_stack, @doctrine.orm.entity_manager] # Les données qu'on injecte au service : la requête et l'EntityManager
        tags:
            - { name: validator.constraint_validator, alias: oc_platform_antiflood }  # C'est avec l'alias qu'on retrouvera le service

    oc_platform.beta.html:
        class: OC\PlatformBundle\Beta\BetaHtml

    oc_platform.beta.listener:
        class: OC\PlatformBundle\Beta\BetaListener
        arguments: [@oc_platform.beta.html, "2016-02-20"]
        tags:
            - { name: kernel.event_listener, event: kernel.response, method: processBeta }


    oc_platform.censorship_processor:
        class:     OC\PlatformBundle\Bigbrother\CensorshipProcessor
        arguments: [@mailer]

    oc_platform.censorship_listener:
        class:     OC\PlatformBundle\Bigbrother\CensorshipListener
        arguments: [@oc_platform.censorship_processor, [1, 2, 3]]
        tags:
            - { name: kernel.event_listener, event: oc_platform.bigbrother.post_message, method: processMessage }

    twig.extension.intl:
       class: Twig_Extensions_Extension_Intl
       tags:
           - { name: twig.extension }

    oc_platform.json_paramconverter:
        class: OC\PlatformBundle\ParamConverter\JsonParamConverter
        tags:
            - { name: request.param_converter }

parameters:
    mon_parametre: ma_valeur
